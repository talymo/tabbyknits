@import url("https://fonts.googleapis.com/css2?family=Merriweather:wght@700&family=Montserrat:wght@400;600;700&display=swap");
.image-text {
  background-color: darkblue;
  padding: 10% 0;
  margin-bottom: 20px;
}
@media all and (min-width: 768px) {
  .image-text .container .text {
    width: 50%;
  }
}
.image-text .container .text h2 {
  font-family: "Source Sans Pro", sans-serif;
  color: #fff;
  font-weight: 700;
  font-size: 32px;
  line-height: 40px;
}
@media all and (min-width: 1200px) {
  .image-text .container .text h2 {
    font-size: 55px;
    line-height: 60px;
  }
}
.image-text .container .text p {
  color: #fff;
  font-family: "Trade Gothic LT Std", sans-serif;
  margin: 20px 0;
  line-height: 32px;
  font-size: 20px;
}
@media all and (min-width: 1200px) {
  .image-text .container .text p {
    font-size: 28px;
    line-height: 40px;
  }
}
.image-text .container .text .button {
  display: inline-block;
  padding: 20px 50px;
  border-radius: 4px;
  background-color: red;
  text-align: center;
  text-decoration: none;
  color: #fff;
  font-weight: 700;
  font-family: "Source Sans Pro", sans-serif;
  font-size: 20px;
}
@media all and (min-width: 1200px) {
  .image-text .container .text .button {
    font-size: 24px;
  }
}
.image-text .container .text .button.green {
  background-color: #8ec740;
}
@media all and (min-width: 768px) {
  .image-text.right .container {
    display: flex;
    justify-content: flex-end;
  }
}

@media all and (min-width: 768px) {
  .image-text.left .container {
    display: flex;
    justify-content: flex-start;
  }
}
@media all and (min-width: 768px) {
  .image-text.left .container .text {
    width: 40%;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UtZmlsZXMvX3ZhcmlhYmxlcy5zY3NzIiwiY29tcG9uZW50cy9jb21wb25lbnQvY29tcG9uZW50LXN0eWxlcy9pbWFnZS10ZXh0LnNjc3MiLCJjb21wb25lbnRzL2NvbXBvbmVudC9jb21wb25lbnQtc3R5bGVzL2ltYWdlLXRleHQuY3NzIiwiYmFzZS1maWxlcy9fbWl4aW5zLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVEsNkhBQUE7QUNFUjtFQUNFLDBCQUFBO0VBQ0EsY0FBQTtFQUNBLG1CQUFBO0FDQUY7QUNGSTtFRk1BO0lBR0ksVUFBQTtFQ0hOO0FBQ0Y7QURLTTtFQUNFLDBDQUFBO0VBQ0EsV0FBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0FDSFI7QUNkSTtFRllFO0lBUUksZUFBQTtJQUNBLGlCQUFBO0VDRlI7QUFDRjtBRE1NO0VBQ0UsV0FBQTtFQUNBLDhDQUFBO0VBQ0EsY0FBQTtFQUNBLGlCQUFBO0VBQ0EsZUFBQTtBQ0pSO0FDM0JJO0VGMEJFO0lBUUksZUFBQTtJQUNBLGlCQUFBO0VDSFI7QUFDRjtBRE9NO0VBQ0UscUJBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxrQkFBQTtFQUNBLHFCQUFBO0VBQ0EsV0FBQTtFQUNBLGdCQUFBO0VBQ0EsMENBQUE7RUFDQSxlQUFBO0FDTFI7QUM3Q0k7RUZ3Q0U7SUFhSSxlQUFBO0VDSlI7QUFDRjtBRFVRO0VBQ0UseUJBQUE7QUNSVjtBQ3JESTtFRndFQTtJQUdJLGFBQUE7SUFDQSx5QkFBQTtFQ2xCTjtBQUNGOztBQzNESTtFRnlGQTtJQUdJLGFBQUE7SUFDQSwyQkFBQTtFQzVCTjtBQUNGO0FDbEVJO0VGZ0dFO0lBR0ksVUFBQTtFQzdCUjtBQUNGIiwiZmlsZSI6ImNvbXBvbmVudHMvY29tcG9uZW50L2NvbXBvbmVudC1zdHlsZXMvaW1hZ2UtdGV4dC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NZXJyaXdlYXRoZXI6d2dodEA3MDAmZmFtaWx5PU1vbnRzZXJyYXQ6d2dodEA0MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXAnKTtcclxuXHJcbi8vVU5JVkVSU0FMIFNUWUxFU1xyXG5cclxuLy9DT0xPUiBQQUxFVFRFXHJcbiRibGFjazogIzAwMDAwMDtcclxuJHdoaXRlOiAjZmZmZmZmO1xyXG4kaG92ZXI6ICM1NkEwRDM7XHJcblxyXG4vLyBCcmFuZCBDb2xvcnNcclxuJHRlYWw6IDA7XHJcbiRyZWQ6IDA7XHJcbiRncmV5OiAwO1xyXG4kZ3JlZW46IDA7XHJcbiR5ZWxsb3c6IDA7XHJcbiRwdXJwbGU6IDA7XHJcblxyXG4vL1RZUE9HUkFQSFlcclxuJHNlcmlmOiBzZXJpZjtcclxuJHNhbnNTZXJpZjogc2Fucy1zZXJpZjsiLCJAaW1wb3J0ICdiYXNlJztcclxuXHJcbi5pbWFnZS10ZXh0IHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrYmx1ZTtcclxuICBwYWRkaW5nOiAxMCUgMDtcclxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG5cclxuICAuY29udGFpbmVyIHtcclxuXHJcbiAgICAudGV4dCB7XHJcblxyXG4gICAgICBAaW5jbHVkZSByZXNwb25zaXZlKHRhYmxldCkge1xyXG4gICAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGgyIHtcclxuICAgICAgICBmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgY29sb3I6ICNmZmY7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICAgICBmb250LXNpemU6IDMycHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDQwcHg7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIHJlc3BvbnNpdmUobGFyZ2UpIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogNTVweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiA2MHB4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHAge1xyXG4gICAgICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAnVHJhZGUgR290aGljIExUIFN0ZCcsIHNhbnMtc2VyaWY7XHJcbiAgICAgICAgbWFyZ2luOiAyMHB4IDA7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMycHg7XHJcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG5cclxuICAgICAgICBAaW5jbHVkZSByZXNwb25zaXZlKGxhcmdlKSB7XHJcbiAgICAgICAgICBmb250LXNpemU6IDI4cHg7XHJcbiAgICAgICAgICBsaW5lLWhlaWdodDogNDBweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICAuYnV0dG9uIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgcGFkZGluZzogMjBweCA1MHB4O1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgICAgIGZvbnQtZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJywgc2Fucy1zZXJpZjtcclxuICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIHJlc3BvbnNpdmUobGFyZ2UpIHtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYuYmlnIHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLmdyZWVuIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM4ZWM3NDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICAmLnJpZ2h0IHtcclxuXHJcbiAgICAuY29udGFpbmVyIHtcclxuXHJcbiAgICAgIEBpbmNsdWRlIHJlc3BvbnNpdmUodGFibGV0KSB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG4uaW1hZ2UtdGV4dCB7XHJcblxyXG4gICYubGVmdCB7XHJcblxyXG4gICAgLmNvbnRhaW5lciB7XHJcblxyXG4gICAgICBAaW5jbHVkZSByZXNwb25zaXZlKHRhYmxldCkge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAudGV4dCB7XHJcblxyXG4gICAgICAgIEBpbmNsdWRlIHJlc3BvbnNpdmUodGFibGV0KSB7XHJcbiAgICAgICAgICB3aWR0aDogNDAlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0iLCJAaW1wb3J0IHVybChcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TWVycml3ZWF0aGVyOndnaHRANzAwJmZhbWlseT1Nb250c2VycmF0OndnaHRANDAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIpO1xuLmltYWdlLXRleHQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrYmx1ZTtcbiAgcGFkZGluZzogMTAlIDA7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiA3NjhweCkge1xuICAuaW1hZ2UtdGV4dCAuY29udGFpbmVyIC50ZXh0IHtcbiAgICB3aWR0aDogNTAlO1xuICB9XG59XG4uaW1hZ2UtdGV4dCAuY29udGFpbmVyIC50ZXh0IGgyIHtcbiAgZm9udC1mYW1pbHk6IFwiU291cmNlIFNhbnMgUHJvXCIsIHNhbnMtc2VyaWY7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXNpemU6IDMycHg7XG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xufVxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTIwMHB4KSB7XG4gIC5pbWFnZS10ZXh0IC5jb250YWluZXIgLnRleHQgaDIge1xuICAgIGZvbnQtc2l6ZTogNTVweDtcbiAgICBsaW5lLWhlaWdodDogNjBweDtcbiAgfVxufVxuLmltYWdlLXRleHQgLmNvbnRhaW5lciAudGV4dCBwIHtcbiAgY29sb3I6ICNmZmY7XG4gIGZvbnQtZmFtaWx5OiBcIlRyYWRlIEdvdGhpYyBMVCBTdGRcIiwgc2Fucy1zZXJpZjtcbiAgbWFyZ2luOiAyMHB4IDA7XG4gIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICBmb250LXNpemU6IDIwcHg7XG59XG5AbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAxMjAwcHgpIHtcbiAgLmltYWdlLXRleHQgLmNvbnRhaW5lciAudGV4dCBwIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDQwcHg7XG4gIH1cbn1cbi5pbWFnZS10ZXh0IC5jb250YWluZXIgLnRleHQgLmJ1dHRvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcGFkZGluZzogMjBweCA1MHB4O1xuICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LWZhbWlseTogXCJTb3VyY2UgU2FucyBQcm9cIiwgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAyMHB4O1xufVxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTIwMHB4KSB7XG4gIC5pbWFnZS10ZXh0IC5jb250YWluZXIgLnRleHQgLmJ1dHRvbiB7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICB9XG59XG4uaW1hZ2UtdGV4dCAuY29udGFpbmVyIC50ZXh0IC5idXR0b24uZ3JlZW4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGVjNzQwO1xufVxuQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgLmltYWdlLXRleHQucmlnaHQgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICB9XG59XG5cbkBtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC5pbWFnZS10ZXh0LmxlZnQgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gIH1cbn1cbkBtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC5pbWFnZS10ZXh0LmxlZnQgLmNvbnRhaW5lciAudGV4dCB7XG4gICAgd2lkdGg6IDQwJTtcbiAgfVxufSIsIi8vTWl4aW4gdG8gZ2VuZXJhdGUgbWVkaWEgcXVlcmllc1xyXG5AbWl4aW4gcmVzcG9uc2l2ZSgkYnJlYWtwb2ludCkge1xyXG4gIEBpZiBtYXAtaGFzLWtleSgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSB7XHJcbiAgICBAbWVkaWEgYWxsIGFuZCAje21hcC1nZXQoJGJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludCl9IHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAZWxzZSB7XHJcbiAgICBAd2FybiBcIk5vIHZhbHVlIGNvdWxkIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBtZWRpYSBxdWVyeSBtYXAsIHBsZWFzZSBtYWtlIHN1cmUgaXQgaXMgZGVmaW5lZC5cIjtcclxuICB9XHJcbn0iXX0= */
